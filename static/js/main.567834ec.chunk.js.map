{"version":3,"sources":["components/AnimatedMan/index.js","utils/sortData.js","components/UserList/index.js","App.js","serviceWorker.js","index.js"],"names":["AnimatedHorse","console","log","id","fetchUsers","users","i","user","faker","random","uuid","name","findName","email","internet","joinedOn","date","recent","commentCount","number","push","Promise","resolve","sortListDescending","copy","length","j","t","sortListAscending","sort","a","b","Number","UserList","useState","setUsers","status","setStatus","workerState","setWorkerState","addToast","useToasts","useWorker","sortListDescWorker","DescWorkerStatus","DescWorkerKill","kill","sortListAscWorker","AscWorkerStatus","AscWorkerKill","useEffect","fetchData","sortWorkerData","appearance","sortWorkerDataAsc","className","onClick","disabled","WORKER_STATUS","RUNNING","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.567834ec.chunk.js","sourcesContent":["import React from 'react'\nimport './index.css'\nconst AnimatedHorse = () => {\n    console.log(\"running\")\n    return (<div>\n        <div id=\"animation\"></div>\n    </div>)\n}\n\nexport default AnimatedHorse;","import faker from 'faker';\n\nexport function fetchUsers() {\n    const users = [];\n\n    for (let i = 0; i < 50000; i++) {\n        let id = faker.random.uuid();\n        let name = faker.name.findName();\n        let email = faker.internet.email();\n        let joinedOn = faker.date.recent();\n        let commentCount = faker.random.number();\n        let user = {\n            id,\n            name,\n            email,\n            joinedOn,\n            commentCount\n        };\n        users.push(user);\n    }\n    return Promise.resolve(users);\n}\n\nexport function sortListDescending(users) {\n    const copy = [...users];\n    for (var i = 0; i < copy.length-1; i++) {\n        for (var j = i+1; j < copy.length; j++) {\n            if (copy[i].commentCount < copy[j].commentCount) {\n                var t = copy[i];\n                copy[i] = copy[j];\n                copy[j] = t;\n            }\n        }\n    }\n    return copy;\n}\n\nexport function sortListAscending(users) {\n    const copy = [...users];\n\n    const data= copy.sort((a, b) => Number(a.commentCount) - Number(b.commentCount));\n\n\n    return data;\n\n}","import React,{ useEffect,useState } from 'react';\nimport { fetchUsers,sortListDescending,sortListAscending } from '../../utils/sortData'\n\nimport { useWorker,WORKER_STATUS } from \"@koale/useworker\";\n\nimport { useToasts } from \"react-toast-notifications\";\n\nimport './index.css'\nconst UserList = () => {\n\n    const  [users,setUsers] = useState([]);\n    const [status,setStatus] = useState('DESC')\n    const [workerState,setWorkerState] = useState('DESC')\n\n    const { addToast } = useToasts();\n\n\n    const [sortListDescWorker,{ status : DescWorkerStatus,kill: DescWorkerKill }] = useWorker(sortListDescending)\n    const [sortListAscWorker,{ status : AscWorkerStatus,kill : AscWorkerKill }] = useWorker(sortListAscending);\n\n\n    useEffect(() => {\n        async function fetchData(){\n            const user = await fetchUsers();\n            setUsers(user)\n        }\n        fetchData()\n    },[])\n\n    const sortData = () => {\n       const sortedData = sortListDescending(users);\n       setStatus('ASC')\n    //    setUsers(sortedData)\n       addToast(\"Finished: Sort.\", { appearance: \"success\" });\n    }\n\n    const sortWorkerData = async () => {\n        try {\n           await sortListDescWorker(users);\n            setWorkerState('ASC')\n            // setUsers(sortedData)\n         addToast(\"Finished: Sort using useWorker.\", { appearance: \"success\" });\n        }\n        catch(e){\n            console.log(e);\n         addToast(\"Some Error Occurred\", { appearance: \"error\" });\n        }\n       \n    }\n\n    const sortDataAsc = () => {\n        const sortedData = sortListAscending(users);\n\n        setStatus('DESC');\n        // setUsers(sortedData)\n        addToast(\"Finished: Sort.\", { appearance: \"success\" });\n    }\n\n    const sortWorkerDataAsc = async () => {\n        try {\n            await sortListAscWorker(users);\n            setWorkerState('DESC');\n            // setUsers(sortedData)\n            addToast(\"Finished: Sort using useWorker.\", { appearance: \"success\" });\n        }\n        catch(e){\n            console.log(e);\n            addToast(\"Some Error Occurred\", { appearance: \"error\" });\n        }\n     \n    }\n\n\n    return (<div className=\"user-div\">\n        <button className=\"sort-button\" onClick={ status && status === 'DESC' ? sortData : sortDataAsc}>Sort Data</button>\n\n        <button className=\"sort-button\" disabled={AscWorkerStatus === WORKER_STATUS.RUNNING || DescWorkerStatus === WORKER_STATUS.RUNNING} onClick={ workerState && workerState === 'DESC' ? sortWorkerData : sortWorkerDataAsc}>{ AscWorkerStatus === WORKER_STATUS.RUNNING || DescWorkerStatus === WORKER_STATUS.RUNNING  ? `Loading` : 'useWorker Sort' }</button>\n        { AscWorkerStatus === WORKER_STATUS.RUNNING || DescWorkerStatus === WORKER_STATUS.RUNNING ? (<button className=\"sort-button\" onClick={AscWorkerStatus === WORKER_STATUS.RUNNING ? AscWorkerKill : DescWorkerKill}>Kill Worker</button>) : null }\n    </div>);\n}\n\nexport default UserList;","import React from 'react';\nimport './App.css';\nimport AnimatedHorse from './components/AnimatedMan'\nimport UserList from './components/UserList'\nimport { ToastProvider } from \"react-toast-notifications\";\n\nfunction App() {\n  return (\n    <ToastProvider>\n    <div className=\"App\">\n      <AnimatedHorse />\n      <div>\n        <UserList />\n      </div>\n    </div></ToastProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}